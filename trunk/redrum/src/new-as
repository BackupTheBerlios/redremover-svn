#!/usr/bin/perl


$AS="/usr/bin/as.bin";
$TRANS="/usr/bin/rr-translate";

$env=delete $ENV{"ASM_SUBST_DIR"};
exec $AS, @ARGV unless $env;

$input=pop(@ARGV);

$opt=delete $ENV{"ASM_SUBST_OPT"};
$opt{$1}++ while $opt =~ s#\-(\w)\s*##x;

# print STDERR "OPTIONS: ", join(", ", keys %opt),"\n";

$cmd= "set -o pipefail && ";

( $INCDIR=readlink($TRANS) ) =~ s{/[^/]+$}{};

{
	$cmd .= 

# we need to support "-" as input, too - so a "< $input" doesn't work.

# Remove #APP and similar, to avoid getting high-level source like 
# "static inline", "while ()", "#define" etc. getting in the way.
	" grep -v '^#' $input | " .

# During compilation of eg. arch/x86/kernel/head_64.o we get lines like
#   .balign (1 << 12); .globl init_level4_pgt; .p2align 4,,15; init_level4_pgt:
# which have after the "as" command only the ".balign" left; then the 
# labels are missing, and compilation fails.
# We split multiple assembler statements separated with ";" into multiple 
# lines.
# Note: We have to be careful about ASCII strings, which might contain ';'; 
# such lines are currently ignored.
	" perl -pe 's#;#\\n#g unless /\.(asciz|string)/;' |" .

	($opt{"D"} ? " tee /tmp/a1-$$.s | " : "") .

# ASM macros are now done via "as", previously via 
# " gcc " . $ENV{"COLLECT_GCC_OPTIONS"} . " -S $tmp | " .
	($opt{"M"} ? "" : 
# This is not entirely correct - we'd have to pass options like the 
# destination architecture (32/64) etc.
		" $AS -alm -o /dev/null - | " .

# Bug in as 2.19.1: sometimes multiple strings get written in a single 
# line, like this one with 27k characters:
#   .string " \t\n\\".LC3: .string "file\t".LC4: .string "partition"...
# The other strings are repeated in lines below, too - so we just kill 
# them here.
	q( perl -pe 's/(\.string\s+".*?[\\\\]{2}").*/$1/;' |) .


# The assembler listing gives two labels for ENTRY(wakeup_long64) in
# arch/x86/kernel/acpi/wakeup_64.S; this is fixed in rr-translate.pl.

		($opt{"D"} ? " tee /tmp/a2-$$.s | " : "") ) .

# The actual translation
	" PERL5LIB=$INCDIR $TRANS " . 
	($opt{"d"} ? "-D " : "") .
	" -s" . $env . " - " .

	($opt{"D"} ? " | tee /tmp/a3-$$.s " : "") .

	"| ";

	$input="-";
}

$cmd .= join(" ", $AS, @ARGV, $input);

if ($opt{"D"})
{
	$cmd .= " && ( set ; echo '" . join("' '", @ARGV) . "' ) > /tmp/a4-$$.s ";
	print STDERR "calling $cmd\n";
}


#%ENV=( "PATH" => $ENV{"PATH"} );

exec "bash", "-c", $cmd;

# vim: set sw=4 ts=4 et
